package jevolution.expressions;

import java_cup.runtime.*;

parser code {:
	boolean syntaxErrors = false;

	public void report_error(String message, Object info) {
		syntaxErrors = true;

		System.out.println(message);

		if ( !(info instanceof Symbol) ) return;
		Symbol symbol = (Symbol) info;

		if ( symbol.left < 0 || symbol.right < 0 ) return;

		System.out.println(" at line "+symbol.left+", column "+symbol.right);
	}
:}

/* properties */
terminal		RED, GREEN, BLUE;
terminal		WIDTH, HEIGHT;
terminal		VELOCITY, ACCELERATION, ANGULAR_VELOCITY;
terminal		PI;

/* literal, everything a double right now */
terminal String LITERAL;

/* operators */
terminal		ADDOP, SUBOP;
terminal		MULTOP, DIVOP;

/* error */
terminal String ERROR;

/* parens */
terminal		LPAREN, RPAREN;

non terminal CreatureExpressionNode expr, literalExpr;
non terminal ValueNode value;

/* precedences */
precedence left ADDOP, SUBOP;
precedence left MULTOP, DIVOP;

expr ::=		LPAREN expr:e RPAREN {: RESULT = new ParenthesisExpression(e); :}
				| expr:lhs ADDOP expr:rhs {: RESULT = new AdditionNode(lhs, rhs); :}
				| expr:lhs SUBOP expr:rhs {: RESULT = new SubtractionNode(lhs, rhs); :}
				| expr:lhs MULTOP expr:rhs {: RESULT = new MultiplicationNode( lhs, rhs); :}
				| expr:lhs DIVOP expr:rhs {: RESULT = new DivisionNode( lhs, rhs); :}
				| SUBOP expr:e {: RESULT = new NegateNode(e); :}
				| value:e {: RESULT = e; :}
				| ERROR:e {: parser.done_parsing(); RESULT = new ErrorNode(e); :}
				;

value ::=		RED {: RESULT = new RedNode(); :}
				| GREEN {: RESULT = new GreenNode(); :}
				| BLUE {: RESULT = new BlueNode(); :}
				| WIDTH {: RESULT = new WidthNode(); :}
				| HEIGHT {: RESULT = new HeightNode(); :}
				| VELOCITY {: RESULT = new VelocityNode(); :}
				| ACCELERATION {: RESULT = new AccelerationMagnitudeNode(); :}
				| ANGULAR_VELOCITY {: RESULT = new AngularVelocityMagnitudeNode(); :}
				| PI {: RESULT = new PiNode(); :}
				| LITERAL:e {: RESULT = new LiteralNode(Double.parseDouble(e)); :}
				;
